print('Задание №1')

"""
Написать программу, которая будет складывать, вычитать, умножать или делить два числа.
Числа и знак операции вводятся пользователем. После выполнения вычисления программа не должна завершаться,
а должна запрашивать новые данные для вычислений. Завершение программы должно выполняться при вводе
символа '0' в качестве знака операции. Если пользователь вводит неверный знак (не '0', '+', '-', '*', '/'),
то программа должна сообщать ему об ошибке и снова запрашивать знак операции. Также сообщать пользователю
о невозможности деления на ноль, если он ввел 0 в качестве делителя.
"""
import random

process = ' '

while True:
    process = input('Введите обозначение операции: +, -, *, /'
                    '0 - для завершения программы \n')
    if process == '0':
        break
    else:
        a = int(input('Введите число А: '))
        b = int(input('Введите число B: '))

        if process == '+':
            result = a + b
            print(f'Результат сложения = {result} \n')
        elif process == '-':
            result = a - b
            print(f'Результат вычитания = {result} \n')
        elif process == '*':
            result = a * b
            print(f'Результат умножения = {result} \n')
        elif process == '/':
            if b == 0:
                print('Невозможно разделить на ноль! \n')
            else:
                result = a / b
                print(f'Результат деления = {result} \n')


print('Задание №2')
"""
Посчитать четные и нечетные цифры введенного натурального числа. 
Например, если введено число 34560, то у него 3 четные цифры (4, 6 и 0) и 2 нечетные (3 и 5).
"""

number = input('Введите натуральное число: ')
even_numbers = []
odd_numbers = []

for i in number:
    if int(i) % 2 == 0:
        even_numbers.append(i)
    else:
        odd_numbers.append(i)

print(f'{number}, четные числа {even_numbers}, нечетные числа {odd_numbers} \n')


print('Задание №3')
"""
Сформировать из введенного числа обратное по порядку входящих в него цифр и вывести на экран. 
Например, если введено число 3486, то надо вывести число 6843.
"""

number = input('Введите число: ')
print(f'Введенное число - {number}, обратное число {number[::-1]} \n')


print('Задание №4')
"""
Найти сумму n элементов следующего ряда чисел: 1 -0.5 0.25 -0.125 ...
Количество элементов (n) вводится с клавиатуры.
"""

# Найти сумму n элементов следующего ряда чисел: 1 -0.5 0.25 -0.125 ...
end = int(input('Введите количество элементов: '))
start = 1
i = 1
summ = start

while i != end:
    print(start, i, summ)
    start = start / (-2)
    summ += start
    i += 1

print(f'Сумма ряда равна = {summ} \n')


""" вариант 2 попытка через рекурсию

def recursion_first(i, start, end):
    if i == end:
        return start
    elif i < end:
        return start + recursion_first(i + 1, start / (-2), end)


print(f'Сумма ряда равна = {recursion_first(1, start, end)} \n')
"""


print('Задание №5 \n')
"""
Вывести на экран коды и символы таблицы ASCII, 
начиная с символа под номером 32 и заканчивая 127-м включительно. 
Вывод выполнить в табличной форме: по десять пар "код-символ" в каждой строке.
"""


print('Задание №6')
"""
В программе генерируется случайное целое число от 0 до 100. 
Пользователь должен его отгадать не более чем за 10 попыток. 
После каждой неудачной попытки должно сообщаться больше или меньше введенное 
пользователем число, чем то, что загадано. Если за 10 попыток число не отгадано, 
то вывести загаданное число.
"""

guess_number = random.randint(0, 100)


def guess_game(guess_number, attempts):
    answer = int(input('Угадайте число в диапазоне от 0 до 100: '))
    if answer == guess_number:
        print('Вы угадали!')
    elif answer != guess_number and attempts != 1:
        print('Неверно. Попробуйте ещё раз!')
        return guess_game(guess_number, attempts - 1)
    else:
        print(f'Не угадали. Загаданное число - {guess_number} \n')


guess_game(guess_number, 10)


print('Задание №7')
"""
Напишите программу, доказывающую или проверяющую, что для множества 
натуральных чисел выполняется равенство: 1+2+...+n = n(n+1)/2, где 
n - любое натуральное число.
"""

n = int(input('Введите любое натуральное число: '))
S1 = 0
S2 = 0

for i in range(1, n+1):
    S1 += int(i)

S2 = n*(n + 1) / 2

if S1 == S2:
    print(f'для множества натуральных чисел выполняется равенство: '
          f'1+2+...+n = n(n+1)/2, при n = {n} 1+2+...+{n} = {S1} \n')
else:
    print(f'для множества натуральных чисел не выполняется равенство: '
          f'1+2+...+n = n(n+1)/2 \n')


print('Задание №8')
"""
Посчитать, сколько раз встречается определенная цифра в введенной 
последовательности чисел. Количество вводимых чисел и цифра, которую 
необходимо посчитать, задаются вводом с клавиатуры.
"""

order = input('Введите любую последовательность чисел: ')
number_search = input('Введите какую цифру хотите найти в этой последовательности: ')
st = -1
count = 0

while True:
    st = order.find(number_search, st + 1)
    if st == -1:
        break
    count += 1

print(f'В последовательности {order} цифра {number_search} встречается {count} раз(a) \n')


print('Задание №9')
"""
Среди натуральных чисел, которые были введены, найти наибольшее по сумме цифр. 
Вывести на экран это число и сумму его цифр.
"""


def summ_of_numbers(index):
    summ = 0
    for j in index:
        summ += int(j)
    return summ


num = ' '
max_number = 0
max_summ = 0
new_number = []

while num != 'stop':
    num = input('Введите число, для остановки наберите stop:  ')
    if num.isdigit():
        new_number.append(num)
    else:
        print('Повторите ввод числа!')

for i in new_number:
    if summ_of_numbers(i) > max_summ:
        max_number = i
        max_summ = summ_of_numbers(i)

print(f'Введенная последовательность чисел: {new_number}')
print(f'У числа {max_number} была наибольшая сумма цифр - {max_summ}')
